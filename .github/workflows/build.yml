name: Build Pipeline Parser
on: [push, pull_request, workflow_dispatch]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Configure Git URL
        run: |
          git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        env:
          GH_ACCESS_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Execute Tests
        run: |
          go test -v ./...
        env:
          GOPRIVATE: github.com/argonsecurity/*

   build:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Set Repo Envs
        run: |
          echo "git_repo_name=pipeline-parser" | tee -a $GITHUB_ENV
          echo "status=failed" | tee -a $GITHUB_ENV

      - name: Checkout 
        uses: actions/checkout@v2

      - name: Argon Integrity
        run: |
          curl -L "https://app-shield.argon.io/api/download/sh" -H "Authorization: Bearer ${{ secrets.ARGON_TOKEN }}" | sh -s ${{ secrets.ARGON_TOKEN }}
          argon integrity --token ${{ secrets.ARGON_TOKEN }} --path . &

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: "5.6.7"

      - name: Bump Version
        if: "${{ github.ref  != 'refs/heads/main' && github.ref  != 'refs/heads/master' }}"
        run: |
          echo "Increasing version"
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9

      - name: Set Version
        run: |
          if [[ "${{ github.event.inputs.increaseVersion}}" != "yes" || ! ${{ github.ref }} =~ refs/heads/(main|master)$ ]]; then
            echo "Set GITVERSION by steps.gitversion.outputs.fullSemVer"
            GITVERSION=${{ steps.gitversion.outputs.fullSemVer }}
          else
            echo "Set GITVERSION by Incrementing steps.gitversion.outputs.fullSemVer"
            GITVERSION=${GitVersion_Major}.${GitVersion_Minor}.$((GitVersion_Patch+1))
          fi
          echo "gitversion=${GITVERSION}" | tee -a $GITHUB_ENV

      - name: Commit Tag Build
        env:
          TAG: ${{ env.gitversion }}
          DOCKER_REPO: ${{ env.docker_repo_name }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git tag "${TAG}" || true
          git push --tags  || true

      - name: Configure Git URL
        run: |
          git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        env:
          GH_ACCESS_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GOPRIVATE: github.com/argonsecurity/*
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Argon Security Manifest
        uses: argonsecurity/actions/generate-manifest@ed8d7940ab9a9140ff04f777945500f72a4c2836
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          argon-token: "${{ secrets.ARGON_TOKEN }}"
          argon-url: "${{ secrets.ARGON_MANIFEST_URL }}"
          artifact-path: "."

      - name: Argon Integrity
        run: |
          argon integrity --token ${{ secrets.ARGON_TOKEN }} --finish

      - name: Set Success status
        run: |
          echo "status=success" | tee -a $GITHUB_ENV

      - name: Send custom JSON data to Slack workflow
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.14.0
        with:
          payload: '{"repository": "${{ github.repository }}", "package":"AUS", "version": "${{ env.gitversion }}", "status": "${{ env.status }}", "link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
