# == Summary of Baserow's CI workflow:
#
# This file contains the gitlab CI job definitions that build and test Baserow
# automatically.
#
# === Overview of how Baserow uses git branches
#
# * `develop` is the branch we merge newly developed features onto from feature
#   branches.
# * a feature branch is a branch made starting off `develop` containing a specific
#   new feature, when finished it will be merged back onto `develop`.
# * `master` is the branch which contains official releases of Baserow, to do so we
#   periodically merge the latest changes from `develop` onto `master` and then tag
#   that new master commit with a git tag containing the version (1.8.2 etc).
#
# === How new version of Baserow is released to Dockerhub
#
# A. Create an MR from develop to master and merge it.
# B. Wait for the merge commit pipeline succeed on master which will build and test the
#    images.
# C. Tag the merge commit in the Gitlab GUI with the git tag being the Baserow version
#    (1.8.2, 1.0, etc).
# D. Gitlab will make a new pipeline for the tag which will push the images built in
#    step B to Dockerhub. If step B failed or has not completed yet then this pipeline
#    will fail and not push anything.
#
# === What Gitlab CI steps are configured to run and when
#
# See below for the high level summary of the steps Gitlab will run to build, test and
# release Baserow images in various scenarios depending on the branches involved.
#
# ==== On the master branch - When MR Merged/commit pushed/branch made
#
#   1. The backend and web-frontend dev images will be built and pushed to the
#      gitlab ci image repo.
#      1. A `{image_dev}:ci-latest-$CI_COMMIT_SHA` image is pushed for the next stages.
#      2. A `{image_dev}:ci-latest-$BRANCH_NAME` image is pushed to cache future runs.
#   2. The pushed `ci-latest-$CI_COMMIT_SHA` images will be tested and linted. If a
#      previously successful test/lint run is found for the same/prev commit AND no
#      files have changed which could possibly change the result this is skipped.
#   3. Cached from the `ci-latest-$CI_COMMIT_SHA` image the non-dev images will be built
#      and then both the dev and non-dev images will be with tagged marking them as
#      tested and pushed to the gitlab ci repo.
#   4. Trigger a pipeline in any downstream repos that depend on this one.
#
# ==== On the develop branch - When MR Merged/new commit pushed
#
#   The build and testing steps 1, 2 and 3 from above are run first and then:
#   4. Push the tested images from step 3 to the Dockerhub repo under the
#      `develop-latest` tag.
#   5. Trigger a pipeline in any downstream repos that depend on this one.
#
# ==== On feature branches - When MR Merged/new commit pushed
#
#   The build and testing steps 1, 2 and 3 from above are run.
#
# ===== On the latest commit on master - When a Git tag is created
#
#   This is done when we have merged the latest changes from develop on master, and we
#   want to release them as a new version of Baserow. Gitlab will automatically detect
#   the new git tag and only do the following:
#
#   1. Push the images built from step 3 above (or fail if they don't exist) to the
#      Dockerhub repo with the tags:
#      1. `latest`
#      2. `${git tag}`
#
# ==== Older commit on master - When a Git tag created
#
#   1. Push the images built from step 3 above (or fail if they don't exist) to the
#      Dockerhub repo with the tags:
#      1. `${git tag}`
#
# ==== Any non-master commit - When a Git tag created
#
#   1. Fail as only master commits should be tagged/released.
#
# == Cleanup
#
# Images with tags starting with `ci-latest` or `ci-tested` (made in steps 1. and 3.)
# will be deleted after they are 7 days old by a job that runs daily at 11AM CET.
#
# == Docker Layer Caching and its Security implications.
#
# The build jobs defined in .gitlab/ci_includes/jobs.yml use docker BUILD_KIT enabled
# image caching to:
# 1. Cache docker image builds between different pipelines and branches.
# 2. Cache docker image builds between the build and build-final stages in a single
#    pipeline.
#
# By using BuildKit and multi-stage docker builds we are able to build and store images
# which can then be pulled and used as a cache to build new images quickly from.
#
# === When are docker builds cached between different pipelines and branches?
#
# On branches other than master:
# 1. A build job first tries to find the latest image built on that branch
#    (registry.gitlab.com/bramw/baserow/ci/IMAGE_NAME:ci-latest-BRANCH_NAME)
#    to use as a build cache.
# 2. If no latest image is found then the build job will try use the latest ci dev image
#    build on the develop branch:
#    (registry.gitlab.com/bramw/baserow/ci/IMAGE_NAME:ci-latest-develop)
# 3. Otherwise, the build job will run the build from scratch building all layers.
# 4. Once the build job finishes it will push a new ci-latest-BRANCH_NAME image for
#    future pipelines to cache from. This image will be built with
#    BUILDKIT_INLINE_CACHE=1 ensuring all of its intermediate layers can be cached from.
#
# On master:
# 1. The latest develop ci image will be used as the build cache.
# 2. Otherwise, no build caching will happen.
#
# === When are docker builds cached on the same pipeline and how?
#
# 1. The initial build stage jobs will build and push a ci image (specifically a docker
#    image built with `--target dev`, this means it will build the `dev` stage in the
#    Dockerfile). This image will be built with BUILDKIT_INLINE_CACHE=1 ensuring all of
#    its intermediate layers can be cached from.
# 2. This image will be used for testing etc if required.
# 3. Finally, in the build-final stage we build the non dev images. We cache these
#    images from two sources:
#    1. The dev ci image built by the previous build stage. This will contain all
#       intermediate layers so the non-dev build should re-use cached layers for all
#       docker layers shared by the dev and non dev stages.
#    2. The latest non-dev ci image built by first a previous pipeline on this branch
#       or if not found then the latest non-dev ci image built on develop. On master
#       similarly to the first build stage we only check develop.
#
# === Security implications of docker image caching
#
# This article does a great job explaining why docker layer caching can cause security
# issues: https://pythonspeed.com/articles/docker-cache-insecure-images/ . But
# fundamentally if you cache the FROM base_image and RUN apt upgrade && apt update
# stages docker won't ever re-run these, even if the base image has changed OR there
# have been security fixes published for the packages.
#
# === Periodic full rebuilds on develop
#
# To get around the security implications of docker image layer caching we have a
# daily ci pipeline scheduled job on develop (https://gitlab.com/bramw/baserow/-/pipeline_schedules)
# which sets TRIGGER_FULL_IMAGE_REBUILD=yes as a pipeline variable. This forces all
# the build stages to build their docker images from scratch pulling any updated base
# images.
#
# This pipeline rebuilds all the `registry.gitlab.com/bramw/baserow/ci/IMAGE_NAME:ci-latest-develop`
# images used for build caching on other branches, develop itself and on master to have
# the latest security updates.
#
# === Why does master cache from develop and not use its own ci-latest cache images?
#
# 1. Master might not have any pipelines run for weeks between releases meaning:
#   a. If it had its own ci-latest cached images they would get cleaned up before they
#      could be used
#   b. If they weren't cleaned up their layers might be massively out of date and weeks
#      old.
# 2. Ok then why not have a periodic job to rebuild on master?
#   a. We are already periodically rebuilding on develop, why do the same work twice
#      if we can just cache from develop.
#   b. Master might start randomly breaking if breaking changes appear in the base
#      layers that get rebuilt. It's much more preferable that only develop breaks
#      and we fix any issues there before they hit master.
# 3. Why not just always rebuild from scratch on master with no docker build caching?
#   a. This makes the release process slower
#   b. If a base image or package change occurs between the time we finish testing our
#      develop images and when we merge develop into master, the images are master
#      might completely break as a result. So now we would have to worry about
#      this potential source of issues as an extra step for every release.
#   c. We are essentially testing entirely different images from the ones being deployed
#      if we just test on develop and master does a full rebuild.
# 4. By having develop being the only place where we do the full rebuilds, it means we:
#    a. Test those rebuilt base layers on all the feature branches and during any
#       develop testing.
#    b. We CD from develop to staging and so these rebuilds are automatically deployed
#       and tested by that also.
#    c. Only have one source of these rebuilt layers, which we test on develop and then
#       re-use on master knowing they are safe.
#

stages:
  - build
  - test
  - build-final
  - publish

variables:
  TRIGGER_FULL_IMAGE_REBUILD:
    value: "no"
    description: "If set to yes then all images will re-pull their base images and rebuild entirely from scratch with no caching."
  ENABLE_JOB_SKIPPING:
    value: "false"
    description: "If set to true then tests and lints will skipped when safe to do so."
  ENABLE_COVERAGE:
    value: "true"
    description: "If set to false then tests will not generate coverage or testing reports used by gitlab to show nicer MRs."
  ENABLE_RELEASES:
    value: "false"
    description: "If true then on master and develop release images will be pushed automatically"
  TESTED_IMAGE_PREFIX: ci-tested-
  BACKEND_IMAGE_NAME: backend
# ==================================== CI UTIL ====================================

build-ci-util-image:
  image: docker:20.10.12
  stage: build
  services:
    - docker:20.10.12-dind
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_HOST: tcp://docker:2376
  before_script:
    - |
      echo "$CI_REGISTRY_PASSWORD" | \
        docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - cd .gitlab/ci_util_image
    - docker build -t $CI_UTIL_IMAGE .
    - docker push $CI_UTIL_IMAGE
  when: manual
  only:
    changes:
      - .gitlab/ci_util_image/*
  except:
    refs:
      - pipelines
      - tags
  parallel:
    matrix:
      - key1: [value1, value2]
      - key2: value
